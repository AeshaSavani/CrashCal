name: Lint and Format Check

on:
  push:
    branches:
      - main
      - develop
      - master    
  pull_request:
    branches:
      - main
      - develop
      - master
    types:
      - labeled
      - opened
      - reopened
      - edited
      - synchronize

jobs:
  lint_and_format:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Validate branch name
      - name: Validate Branch Name
        run: |
          # Extract the branch name based on whether it's a push or a pull request
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
            BRANCH_NAME="${GITHUB_HEAD_REF}"
          else
            echo "Cannot determine the branch name from GITHUB_REF: $GITHUB_REF"
            exit 1
          fi

          echo "Branch name: $BRANCH_NAME"

          # Define the regex pattern
          PATTERN="^(master|main|develop)$|^(fix|CC).+$"

          # Check if the branch name matches the pattern
          if [[ ! $BRANCH_NAME =~ $PATTERN ]]; then
            echo "Branch name '$BRANCH_NAME' does not match the required pattern."
            exit 1
          fi

          echo "Branch name '$BRANCH_NAME' is valid."

      # Step 2: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Pull Request Reviews
        id: pr_reviews
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/reviews" \
            | jq '[.[] | select(.state == "APPROVED")]' > reviews.json
          echo "Approved reviews: $(cat reviews.json)"

      - name: Check Author and Approvals
        id: check_author
        run: |
          APPROVED_REVIEWS=$(jq length reviews.json)
          AUTHOR=${{ github.event.pull_request.user.login }}
          PR_AUTHOR=${{ github.actor }}

          if [[ "$PR_AUTHOR" == "$AUTHOR" ]]; then
            echo "The author ($AUTHOR) cannot merge their own PR."
            if [[ "$APPROVED_REVIEWS" -lt 2 ]]; then
              echo "PR cannot be merged by the author. Less than 2 approvals."
              exit 1
            else
              echo "PR has 2 approvals, but the author cannot merge."
              exit 1
            fi
          else
            if [[ "$APPROVED_REVIEWS" -lt 2 ]]; then
              echo "PR cannot be merged. Less than 2 approvals."
              exit 1
            fi
          fi

